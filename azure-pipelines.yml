# Deploy to Azure Kubernetes Service

trigger:
- Dev
- qa
- production


resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  containerregistrytype: 'Azure Container Registry'
  azureSubscription: 'Microsoft Azure(1897ed80-b379-4a14-9d08-e356b05b9bf1)'
  azureContainerRegistry: '{"loginServer":"contractmanagementsystem.azurecr.io", "id" : "/subscriptions/1897ed80-b379-4a14-9d08-e356b05b9bf1/resourceGroups/Contract-Management-System/providers/Microsoft.ContainerRegistry/registries/ContractManagementSystem"}'
  dockerComposeFile: '**/docker-compose.yml'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'contractmanagementsystem3e5e-auth'
  imageRepository: 'cmsai'
  dockerServiceConnection: ContractManagementSystem-1971

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerCompose@0
      displayName: Build an image
      inputs:
        action: Build services
        containerregistrytype: $(containerregistrytype)
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: $(dockerComposeFile)
        additionalImageTags: |
          $(tag)
       
    - task: DockerCompose@0
      displayName: "Docker Push"
      inputs:
        action: Push services
        containerregistrytype: $(containerregistrytype)
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: $(dockerComposeFile)
        additionalImageTags: |
          $(tag)
        
    - upload: manifests
      artifact: manifests





# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'cmsAIKube.cms'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@1
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               connectionType: kubernetesServiceConnection
#               kubernetesServiceConnection: CMSAI-contract-management-system-cms-1697044245856
#               secretName: $(imagePullSecret)
#               secretType: dockerRegistry
#               namespace: cms
#               dockerRegistryEndpoint: $(dockerServiceConnection)
#               imagePullSecrets: $(imagePullSecret)
              
             

#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(azureContainerRegistry)/$(imageRepository):$(tag)

